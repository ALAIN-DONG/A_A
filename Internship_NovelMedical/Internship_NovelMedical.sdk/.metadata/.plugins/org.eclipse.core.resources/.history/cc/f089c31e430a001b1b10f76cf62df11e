#include "AD9637_SPI.h"
#include "project_utils.h"

u32	CtrlReg;

void begin_to_go_ready(){//bit0

//	CtrlReg = CtrlReg | 0x00000001;
	Set_begin_go;
	while(!((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<0))){}
}

void begin_to_go(){//bit0
//	CtrlReg = CtrlReg & (~0x00000001);
	Clr_begin_go;
	while(((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<0))){}
}

int get_begin_to_go(){
	return ((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<0)) ? 1:0;
}

void set_ad_pd(){ // bit 1
//	CtrlReg = CtrlReg | 0x00000002;
	Set_ad_pd;
	while(!((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<1))){} // 等待成功置位
}

void clr_ad_pd(){ //bit1
//	CtrlReg = CtrlReg & (~0x00000002);
	Clr_ad_pd;
	while(((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<1))){} //等待成功复位
}

int get_ad_pd(){
	return ((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<1)) ? 1:0;
}

void set_ad_sync(){ //bit 2
//	CtrlReg = CtrlReg | 0x00000004;
	Set_ad_sync;
	while(!((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<2))){}
}

void clr_ad_sync(){ //bit2
//	CtrlReg = CtrlReg & (~0x00000004);
	Clr_ad_sync;
	while(((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<2))){}
}

int get_ad_sync(){
	return ((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<2)) ? 1:0;
}

void active_Adc0(){ //bit3
//	CtrlReg = CtrlReg | 0x00000008;
	Set_ADC0;
	while(!((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<3))){}
	xil_printf("spi reg is %x\r\n", AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET));
}

void desactive_Adc0(){ //bit3
//	CtrlReg = CtrlReg & (~0x00000008);
	Clr_ADC0;
	while(((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<3))){}
	xil_printf("spi reg is %x\r\n", AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET));
}

int get_Adc0_state(){
	return (((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<3)) ? 1:0);
}

void active_Adc1(){ //bit4
//	CtrlReg = CtrlReg | 0x00000016;
	Set_ADC1;
	while(!((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<4))){}
	xil_printf("spi reg is %x\r\n", AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET));
}

void desactive_Adc1(){ //bit4
//	CtrlReg = CtrlReg & (~0x00000016);
	Clr_ADC1;
	while(((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<4))){}
	xil_printf("spi reg is %x\r\n", AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET));
}


int get_Adc1_state(){
	return ((AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET)) & (1<<4)) ? 1:0;
}


//
//void begin_to_go_ready(){
//	CtrlReg = CtrlReg | 0x00000001;
//	AD_9637_SPI_mWriteReg(SPI_BASEADDR, BEGINTOGO_OFFSET, CtrlReg);
////	xil_printf("\r\n *ctrlreg arm is %x    \r\n", CtrlReg);
//}
//
//void begin_to_go(){
//	CtrlReg = CtrlReg & (~0x00000001);
//	AD_9637_SPI_mWriteReg(SPI_BASEADDR, BEGINTOGO_OFFSET, CtrlReg);
////	xil_printf("\r\n *ctrlreg arm is %x    \r\n", CtrlReg);
//}
//
//void set_ad_pd(){
//	CtrlReg = CtrlReg | 0x00000002;
//	AD_9637_SPI_mWriteReg(SPI_BASEADDR, BEGINTOGO_OFFSET, CtrlReg);
////	xil_printf("\r\n *ctrlreg arm is %x    ", CtrlReg);
////	xil_printf("set_ad_pd spi reg is %x\r\n", AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET));
//}
//
//void clr_ad_pd(){
//	CtrlReg = CtrlReg & (~0x00000002);
//	AD_9637_SPI_mWriteReg(SPI_BASEADDR, BEGINTOGO_OFFSET, CtrlReg);
////	xil_printf("\r\n *ctrlreg arm is %x    ", CtrlReg);
////	xil_printf("clr_ad_pd spi reg is %x\r\n", AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET));
//}
//
//void set_ad_sync(){
//	CtrlReg = CtrlReg | 0x00000004;
//	AD_9637_SPI_mWriteReg(SPI_BASEADDR, BEGINTOGO_OFFSET, CtrlReg);
////	xil_printf("\r\n *ctrlreg arm is %x    ", CtrlReg);
////	xil_printf("set_ad_sync spi reg is %x\r\n", AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET));
//}
//
//void clr_ad_sync(){
//	CtrlReg = CtrlReg & (~0x00000004);
//	AD_9637_SPI_mWriteReg(SPI_BASEADDR, BEGINTOGO_OFFSET, CtrlReg);
////	xil_printf("\r\n *ctrlreg arm is %x    ", CtrlReg);
////	xil_printf("clr_ad_sync spi reg is %x\r\n", AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET));
//}
//
//void active_Adc0(){
//	CtrlReg = CtrlReg | 0x00000008;
//	AD_9637_SPI_mWriteReg(SPI_BASEADDR, BEGINTOGO_OFFSET, CtrlReg);
////	xil_printf("\r\n *ctrlreg arm is %x    ", CtrlReg);
////	xil_printf("spi reg is %x\r\n", AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET));
//}
//
//void desactive_Adc0(){
//	CtrlReg = CtrlReg & (~0x00000008);
//	AD_9637_SPI_mWriteReg(SPI_BASEADDR, BEGINTOGO_OFFSET, CtrlReg);
////	xil_printf("\r\n *ctrlreg arm is %x    ", CtrlReg);
////	xil_printf("spi reg is %x\r\n", AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET));
//}
//
//void active_Adc1(){
//	CtrlReg = CtrlReg | 0x00000010;
//	AD_9637_SPI_mWriteReg(SPI_BASEADDR, BEGINTOGO_OFFSET, CtrlReg);
////	xil_printf("\r\n *ctrlreg arm is %x    ", CtrlReg);
////	xil_printf("spi reg is %x\r\n", AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET));
//}
//
//void desactive_Adc1(){
//	CtrlReg = CtrlReg & (~0x00000010);
//	AD_9637_SPI_mWriteReg(SPI_BASEADDR, BEGINTOGO_OFFSET, CtrlReg);
////	xil_printf("\r\n *ctrlreg arm is %x    ", CtrlReg);
////	xil_printf("spi reg is %x\r\n", AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET));
//}



void write_command(u32 commend){
	AD_9637_SPI_mWriteReg(SPI_BASEADDR, CTRLREG_OFFSET, commend);
	while(!(read_cmd_from_ctrlreg() == commend)){}
}



u32	read_data_from_datareg(){
	return	AD_9637_SPI_mReadReg(SPI_BASEADDR, DATAREG_OFFSET);
}

u32	read_cmd_from_ctrlreg(){
	return	AD_9637_SPI_mReadReg(SPI_BASEADDR, CTRLREG_OFFSET);
}

void init_regs(){
	CtrlReg = 0x00000000;

	AD_9637_SPI_mWriteReg(SPI_BASEADDR, BEGINTOGO_OFFSET, CtrlReg);
	while(!(AD_9637_SPI_mReadReg(SPI_BASEADDR, BEGINTOGO_OFFSET) == 0)){}
	AD_9637_SPI_mWriteReg(SPI_BASEADDR, CTRLREG_OFFSET, 0x00000000);
	while(!(AD_9637_SPI_mReadReg(SPI_BASEADDR, CTRLREG_OFFSET) == 0)){}
}




int read_done(){
	u32 done_read;
	done_read = AD_9637_SPI_mReadReg(SPI_BASEADDR, DONE_OFFSET);
	if (done_read & 0x00000001){
		return 1; // SPI sequence finished
	}else{
		return 0; // Problems occurred while in SPI sequence
	}
}




u8 Read_reg(u32 addr, u8 *data_out){
	u32 commands_temp 	= 	0x00000000;
	u8	data_temp;
	commands_temp = addr;
	commands_temp = commands_temp << 8;
	commands_temp |= 1 << (24-1);
	commands_temp &= ~(1<<(23-1));
	commands_temp &= ~(1<<(22-1));
	write_command(commands_temp);

	begin_to_go_ready();
	while(read_done()){};

//	xil_printf("%08x,  %08x \r\n", commands_temp, read_cmd_from_ctrlreg());
	if (read_cmd_from_ctrlreg() == commands_temp){// commands have been written into axi reg, begin to go
		begin_to_go();
	}else{
		xil_printf("failed to write commands into axi regs while Reading\r\n");
		data_temp = 0;
		*data_out = data_temp;
		return data_temp;
	}
//	usleep(DELAY_SPI_OPERATION);
	while(!read_done()){};

	if(read_done()){// operation successfully finished, begin to read the data
		data_temp = read_data_from_datareg() & 0xFF;
		*data_out = data_temp;
		return data_temp;
	}else{// operation hasn't finished, there are certain problems
		xil_printf("problems occurred while reading\r\n");
		data_temp = 0;
		*data_out = data_temp;
		return data_temp;
	}
}


void Write_reg(u32 addr, u8 data_in){
	u32 commands_temp 	= 	0x00000000;
	commands_temp = addr;
	commands_temp = commands_temp << 8;
	commands_temp &= ~(1<<(24-1));
	commands_temp &= ~(1<<(23-1));
	commands_temp &= ~(1<<(22-1));
	commands_temp |= data_in;

//	xil_printf("%08x \r\n", commands_temp);
	write_command(commands_temp);
	begin_to_go_ready();
	while(read_done()){};

	if (read_cmd_from_ctrlreg() == commands_temp){// commands have been written into axi reg, begin to go
		begin_to_go();
	}else{
		xil_printf("failed to write commands into axi regs while Writing\r\n");
	}
//	usleep(DELAY_SPI_OPERATION);
	while(!read_done()){};

	if(!read_done()){// operation not finished successfully
		xil_printf("problems occurred while Writing\r\n");
	}
}


void ReadRegShow(u16 Order_addr){
	u8	reg_result	= 0x00;
    char binary_char[40];

	Read_reg(Order_addr, &reg_result);

	tobin(reg_result, binary_char);

	xil_printf("Read  : %04x | %02x | %s\r\n", Order_addr, reg_result, binary_char);
}

void WriteRegShow( u16 Order_addr, u8 Order_data){
    char binary_char[40];

    Write_reg(Order_addr, Order_data);

	tobin(Order_data, binary_char);

	xil_printf("Write : %04x | %02x | %s\r\n", Order_addr, Order_data, binary_char);
}


void Read_All_Regs(){
	u16 Order_addr = 0x0;
	xil_printf("------------------------------------\r\n");
	while(Order_addr < 0x0020){
		ReadRegShow(Order_addr);
		Order_addr += 0x1;
	}
	xil_printf("  \r\n");
}

